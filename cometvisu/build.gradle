apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
        versionCode project.versionCode.toInteger()
        versionName "$versionMajor.$versionMinor.$versionMicro$versionMicroSuffix-$versionBuildNumber"
        archivesBaseName = "$applicationName-$versionName"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:support-v4:21.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile ("org.robolectric:robolectric:3.2.2")
    testCompile 'org.hamcrest:hamcrest-integration:1.+'
    testCompile 'org.hamcrest:hamcrest-core:1.+'
    testCompile 'org.hamcrest:hamcrest-library:1.+'

    testCompile('junit:junit:4.+') {
        exclude module: 'hamcrest-core'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    reports {
        xml.enabled true
        html.enabled true
    }
    
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

task copyDebugApk(type: Copy) {
    from "$projectDir/build/outputs/apk"
    into "$projectDir/build/outputs/debug"
    include '*debug.apk'
    rename { String fileName ->
        fileName.replace('-debug', '')
    }
}

gradle.projectsEvaluated {
    assembleDebug.finalizedBy copyDebugApk
}
